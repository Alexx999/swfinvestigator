<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:ParamHandlers="ParamHandlers.*"
		   xmlns:utils="utils.*"
		   implements="inspectors.IASInspector" width="721" height="583">
	<fx:Script>
		<![CDATA[
			/****************************************************************************
			 * ADOBE SYSTEMS INCORPORATED
			 * Copyright 2012 Adobe Systems Incorporated and itâ€™s licensors
			 * All Rights Reserved.
			 *  
			 * NOTICE: Adobe permits you to use, modify, and distribute this file
			 * in accordance with the terms of the license agreement accompanying it.
			 * ****************************************************************************/

			import mx.collections.ArrayCollection;
			
			/**
			 * Under construction
			[Bindable]
			private var as3VariablesCol:ArrayCollection = new ArrayCollection(
			[{label:"Under Development", data:"NA"}]);
			 */
            
            [Bindable]
            private var actionTypes:ArrayCollection = new ArrayCollection(
                [ {label:"Retrieve Variable", data:"retrieve"}, 
                  {label:"Call Function", data:"call"},
                  {label:"Assign Variable", data:"assign"}]);

			
			private var sUrl:String;
			private var remapPort:int;
			private var dUserAgent:String;

			/**
			 * The InspectorTab passes down the url and the remap port via this initialization function.
			 * 
			 * @param url The string containing the URL of the SWF.
			 * @param rPort The remote port for the sandbox remappper.
			 * @param uAgent The HTTP user Agent string
			 */
			public function initTab(url:String,rPort:int,uAgent:String):void {
				this.sUrl = url;
				this.remapPort = rPort;
				this.dUserAgent = uAgent;
			}
			
			/**
			 * @private
			 * Load the SWFIntruder.html wrapper and possibly re-initialize the global SWF URL
			 * 
			 * @param swfU The string containing the URL of the remote SWF.
			 * @param reload A boolean inidicating whether this is the initial load or a re-load.
			 */
			private function loadSWF (swfU:String, reload:Boolean = false):void {
				var loadUrl:String = this.sUrl;
				
				if (reload) {loadUrl = swfU;}
				
				this.as3Display.htmlLoader.addEventListener(Event.COMPLETE,initAS3Inspector);
				this.as3Display.htmlLoader.userAgent = this.dUserAgent;
				this.as3Display.horizontalScrollPolicy="off";
				this.as3Display.verticalScrollPolicy="off";
				this.as3Display.htmlLoader.load(new URLRequest("app:/inspectors/swfIntruder.html"));
			}
			
			/**
			 * @private
			 * Returns an Object containing a hash of information regarding the URL such as domain, port and protocol.
			 * 
			 * @return The Object containing the domain,port and protocol information for the current SWFUrl.
			 */
			private function getDomain():Object {
				var domainInfo:Object = new Object;
				domainInfo.domain = "";
				domainInfo.protocol = "";
				domainInfo.port = "";
				
				if (this.sUrl == null) { return(domainInfo); }
				
				if (this.sUrl.indexOf("http://") == 0) {
					domainInfo.protocol = "http://";
		    		domainInfo.domain = this.sUrl.substring(7,this.sUrl.indexOf("/",7));
		    	} else if (this.sUrl.indexOf("https://") == 0) {
		    		domainInfo.protocol = "https://";
		    		domainInfo.domain = this.sUrl.substring(8,this.sUrl.indexOf("/",8));
		    	}
		    	
		    	if (domainInfo.domain.indexOf(":") > 0) {
		    		var temp:Array = domainInfo.domain.split(":");
		    		domainInfo.domain = temp[0];
		    		domainInfo.port = temp[1];
		    	}
		    	
		    	return (domainInfo)
			}
			
			/**
			 * @private
			 * Fetch or assign a variable from the loaded SWF.
			 * 
			 * @param callType A string that flags whether this is a retrieval or assignment operation.
			 */
			private function as3fetchVar(callType:String):void {
				if (this.as3custom.text == "") {
					this.as3output.text = "Please enter a value to fetch!";
					return;
				}
				
				var action:String = this.actionType.selectedItem.data;
				
				var params:String = "";
				if (action == "call" || action == "assign") {
					params = this.sendDG.getFuncParamsXML();
				}
				
				this.as3output.text = this.as3Display.htmlLoader.window.fetchAS3Variable(this.as3custom.text,action,params);
			}
			
			/**
			 * @private
			 * This is an event listener for the loadSWF function to intialize the JS variables within the sandbox remapper.
			 * 
			 * @param e The Complete Event from the loadSWF HTML Loader
			 */
			private function initAS3Inspector(e:Event):void {
		    	var domainInfo:Object = this.getDomain();
				if (e.currentTarget.window.swfData != null) {
					
				   var swfLoc:String = "getAS3VarsWrapper.html?getAS3Vars#swfurl="+ this.sUrl;
				   
				   e.currentTarget.window.swfData.SWFLocation = swfLoc;
				   
				   var rPort:String = this.remapPort.toString();
				   if (domainInfo.port != rPort) {
				  	 e.currentTarget.window.swfData.sandboxRoot = domainInfo.protocol + domainInfo.domain + ":" + rPort.toString();
				   } else {
				   	 e.currentTarget.window.swfData.sandboxRoot = domainInfo.protocol + domainInfo.domain + ":9990";
				   }
				   
				   e.currentTarget.window.swfData.documentRoot = "app-storage:/Inspectors/";
				   e.currentTarget.window.swfData.initArray = initArray;
				   e.currentTarget.window.writeLSOMap();
				   
				}
			}
			
			/**
			 * @private
			 * This is passed to the HTML as a JavaScript callback function for the getAS3Vars.  It has nothing to do with an Array.
			 * 
			 * @param type A string containing the variable type
			 * @param message A String containing the details of the variable.
			 */
			private function initArray (type:String,message:String):void {
				this.as3output.text = type + ":" + message;
			}
			
			/**
			 * @private
			 * Reload the current SWF using the user supplied flashVars
			 */
			private function updateFlashVars():void {
				var newUrl:String;
				if (this.sUrl.indexOf("?") > 0) {
					newUrl = this.sUrl + "&" + this.flashVarsBox.text;
				} else {
					newUrl = this.sUrl + "?" + this.flashVarsBox.text;
				}
				loadSWF(newUrl,true);
			}
			
			/**
			 * @private
			 * Clear the list of AS3 variables and as3output to start over.
			 */
			private function clearArrays():void {
				//this.as3VariablesCol.removeAll();
				this.as3output.text = "";
			}
			
		]]>
	</fx:Script>
	<s:Label x="238" y="8" text="Display"/>
	<s:BorderContainer x="10" y="34" width="453" height="403">
		<mx:HTML id="as3Display" x="0" y="0" width="451" height="401" initialize="loadSWF(this.sUrl,false)" paintsDefaultBackground="false"/>
	</s:BorderContainer>
	<s:TextArea x="10" y="443" width="453" height="123" id="as3output"/>
	<!--
	<s:Label x="558" y="15" text="Variables"/>
	<s:List x="481" y="34" id="as3globalList" dataProvider="{this.as3VariablesCol}" width="223" height="41"/>
	<mx:HRule x="485" y="94" width="219"/>
	-->
	<s:Label x="479" y="33" text="1: Specify the target variable or function"/>
	<s:Label x="481" y="57" text="Function/Variable Name" width="158"/>
	<s:TextInput x="481" y="74" id="as3custom" width="223"
				 toolTip="Please provide the object name plus the property or method. Example: myTextInput.text"/>
	<s:Label x="481" y="118" text="2. Provide the data that will be given to (1)"/>
	<s:Label x="481" y="143" text="Function Parameters/New Value" width="223"/>
	<ParamHandlers:ParamCollection x="481" y="160" width="223" id="sendDG"/>
	<s:Label x="481" y="409" text="3. Choose the action to perform"/>
	<s:DropDownList dataProvider="{this.actionTypes}" id="actionType" x="481" y="428"
					toolTip="Select the action that will be performed to the target specified in step 1."/>
	<s:Button x="635" y="428" label="Execute" click="as3fetchVar('custom')"/>
	<mx:HRule x="485" y="478" width="222"/>
	<s:Label x="481" y="490" text="Update FlashVar Values" width="226"/>
	<s:TextInput x="481" y="507" id="flashVarsBox" editable="true" width="223"
				 toolTip="Update the FlashVars provided to the SWF: foo=1&amp;bar=2"/>
	<s:Button x="481" y="538" label="Update" click="updateFlashVars()"/>
</s:Module>
