{ // start of pass-thru C section
/*
** This is the generated file produced from as3_crypto_wrapper.gg
** This source is an example of how you can use the OpenSSL crypto library from Flash or AIR.
**
** This product includes software developed by the OpenSSL Project
** for use in the OpenSSL Toolkit (http://www.openssl.org/)
**
** ADOBE SYSTEMS INCORPORATED
** Copyright 2008 Adobe Systems Incorporated. All Rights Reserved.
**
** NOTICE:  Adobe permits you to use, modify, and distribute this file in
** accordance with the terms of the Adobe license agreement accompanying it.
** If you have received this file from a source other than Adobe, then your use,
** modification, or distribution of it requires the prior written permission of Adobe.
**
*/

#include <stdlib.h>
#include <string.h>
#include <malloc.h>

#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/rand.h>
#include <openssl/md5.h>
#include <openssl/sha.h>
#include <openssl/pkcs12.h>
#include <openssl/rsa.h>
#include <openssl/dsa.h>
#include <openssl/aes.h>

/* AS3.h is included automatically by gluegen */

void sztrace(char*);

AS3_Val no_params = NULL;
AS3_Val zero_param = NULL;
AS3_Val ByteArray_class = NULL;
AS3_Val getTimer_method = NULL;

/* This function will be called at the top of the generated main(). The GGINIT_DEFINED macro is required. */
#define GGINIT_DEFINED true
static void ggInit()
{
	sztrace("setting up as3_crypto_wrapper library");

	/* setup some useful constants */
	no_params = AS3_Array("");
	zero_param = AS3_Int(0);
	AS3_Val flash_utils_namespace = AS3_String("flash.utils");
	ByteArray_class = AS3_NSGetS(flash_utils_namespace, "ByteArray");
	getTimer_method = AS3_NSGetS(flash_utils_namespace, "getTimer");
	AS3_Release(flash_utils_namespace);

	/* initialize */
	SSLeay_add_all_algorithms();
	ERR_load_crypto_strings();
}

/* Copy the byteArray data into a malloc'd buffer */
static void* newMallocFromByteArray(AS3_Val byteArray, unsigned int* size)
{
	AS3_Val byteArraySize = AS3_GetS(byteArray, "length");
	*size = AS3_IntValue(byteArraySize);
	AS3_Release(byteArraySize);
	void* bytes = malloc(*size);
	AS3_SetS(byteArray, "position", zero_param);
	AS3_ByteArray_readBytes((char*)bytes, byteArray, (int)*size);
	return bytes;
}

/* Make a new ByteArray containing the data passed */
static AS3_Val newByteArrayFromMalloc(void *data, unsigned int size)
{
	AS3_Val byteArray = AS3_New(ByteArray_class, no_params);
	AS3_ByteArray_writeBytes(byteArray, data, size);
	return byteArray;
}

#if 0 // use for profiling
/* get a timestamp from Flash */
static int getTimestamp()
{
	AS3_Val ts = AS3_Call(getTimer_method, NULL, no_params);
	int result = AS3_IntValue(ts);
	AS3_Release(ts);
	return result;
}
#endif

/* convert the padding name to an OpenSSL define */
static int getPadding(const char *name)
{
	const char PKCS1[] = "pkcs1-padding";
	if(strncmp(name, PKCS1, sizeof(PKCS1)-1) == 0)
		return RSA_PKCS1_PADDING;

	const char PKCS1_OAEP[] = "pkcs1-oaep-padding";
	if(strncmp(name, PKCS1_OAEP, sizeof(PKCS1_OAEP)-1) == 0)
		return RSA_PKCS1_OAEP_PADDING;

	const char SSLV23[] = "sslv23-padding";
	if(strncmp(name, SSLV23, sizeof(SSLV23)-1) == 0)
		return RSA_SSLV23_PADDING;

	const char NONE[] = "no-padding";
	if(strncmp(name, NONE, sizeof(NONE)-1) == 0)
		return RSA_NO_PADDING;
		
	return -1;
}

/* Convert OID in dotted notation to an NID_* value */
static int getNID(const char *oid)
{
	const char sha1[] = "1.3.14.3.2.26";
	if(strncmp(oid, sha1, sizeof(sha1)-1) == 0)
		return NID_sha1;
	
	const char sha256[] = "2.16.840.1.101.2.4.2.1";
	if(strncmp(oid, sha256, sizeof(sha256)-1) == 0)
		return NID_sha256;
	
	const char sha384[] = "2.16.840.1.101.2.4.2.2";
	if(strncmp(oid, sha384, sizeof(sha384)-1) == 0)
		return NID_sha384;
	
	const char sha512[] = "2.16.840.1.101.2.4.2.3";
	if(strncmp(oid, sha512, sizeof(sha512)-1) == 0)
		return NID_sha512;
	
	const char md5[] = "1.2.840.113549.2.5";
	if(strncmp(oid, md5, sizeof(md5)-1) == 0)
		return NID_md5;
	
	return -1;
}

static void prng_seed_impl(AS3_Val seed)
{
  /* This is not thread-safe. However Flash is currently single-threaded. */
  static int seeded = 0;
  if(0 == seeded) {
	sztrace("seeding PRNG");
    
	/* use entropy passed if any */
	unsigned int seedSize = 4092;
    if(seed) {
	  unsigned int callerSeedSize = 0;
	  unsigned char * callerSeedBytes = newMallocFromByteArray(seed, &callerSeedSize);
      RAND_add(callerSeedBytes, callerSeedSize, callerSeedSize);
      seedSize -= (callerSeedSize * 8);
	}	  
	  
    /* get <seedSize> bits of entropy from Flash (1/32 .. using 1/2 double each time) */
    AS3_Val mathClass = AS3_NSGetS(NULL, "Math");
    AS3_Val mathRandom = AS3_GetS(mathClass, "random");
	const unsigned int numDoubles = seedSize/32;
	unsigned int i;
    for(i = 0; i < numDoubles; i++) {
      AS3_Val num = AS3_Call(mathRandom, NULL, no_params);
      double e = AS3_NumberValue(num);
      RAND_add(&e, sizeof(e), 4); /* range is 0-1 so just use 4 bytes */
      AS3_Release(num);
    }		
    AS3_Release(mathRandom);
    AS3_Release(mathClass);

    seeded = 1;
  }
}

/* end of passthru C section */
}


public function prng_seed(seed:ByteArray):void
{
	prng_seed_impl(seed);
}


public function prng_random(numBytes:uint):ByteArray
{
	unsigned char * bytes = malloc(numBytes);
	RAND_bytes(bytes, numBytes);
	AS3_Val ba = newByteArrayFromMalloc(bytes, numBytes);
	free(bytes);
	return ba;
}


public function md5_begin():uint
{
	MD5_CTX * hdl = malloc(sizeof(MD5_CTX));
	MD5_Init(hdl);
	return (uint)hdl;
}


public function md5_update(hdl:(MD5_CTX*)uint, data:ByteArray):void
{
	unsigned int size = 0;
	unsigned char* bytes = newMallocFromByteArray(data, &size);
	MD5_Update(hdl, bytes, size);
	free(bytes);
}


public function md5_finish(hdl:(MD5_CTX*)uint):ByteArray
{
	unsigned char * buffer = malloc(MD5_DIGEST_LENGTH);
	MD5_Final(buffer, hdl);
	AS3_Val ba = newByteArrayFromMalloc(buffer, MD5_DIGEST_LENGTH);
	free(buffer);
	return ba;
}


public function sha1_begin():uint
{
	SHA_CTX * hdl = malloc(sizeof(SHA_CTX));
	SHA1_Init(hdl);
	return (uint)hdl;
}


public function sha1_update(hdl:(SHA_CTX*)uint, data:ByteArray):void
{
	unsigned int size = 0;
	unsigned char* bytes = newMallocFromByteArray(data, &size);
	SHA1_Update(hdl, bytes, size);
	free(bytes);
}


public function sha1_finish(hdl:(SHA_CTX*)uint):ByteArray
{
	unsigned char * buffer = malloc(SHA_DIGEST_LENGTH);
	SHA1_Final(buffer, hdl);
	AS3_Val ba = newByteArrayFromMalloc(buffer, SHA_DIGEST_LENGTH);
	free(buffer);
	return ba;
}


public function sha256_begin():uint
{
	SHA256_CTX * hdl = malloc(sizeof(SHA256_CTX));
	SHA256_Init(hdl);
	return (uint)hdl;
}


public function sha256_update(hdl:(SHA256_CTX*)uint, data:ByteArray):void
{
	unsigned int size = 0;
	unsigned char* bytes = newMallocFromByteArray(data, &size);
	SHA256_Update(hdl, bytes, size);
	free(bytes);
}


public function sha256_finish(hdl:(SHA256_CTX*)uint):ByteArray
{
	unsigned char * buffer = malloc(SHA256_DIGEST_LENGTH);
	SHA256_Final(buffer, hdl);
	AS3_Val ba = newByteArrayFromMalloc(buffer, SHA256_DIGEST_LENGTH);
	free(buffer);
	return ba;
}


public function sha384_begin():uint
{
	SHA512_CTX * hdl = malloc(sizeof(SHA512_CTX));
	SHA384_Init(hdl);
	return (uint)hdl;
}


public function sha384_update(hdl:(SHA512_CTX*)uint, data:ByteArray):void
{
	unsigned int size = 0;
	unsigned char* bytes = newMallocFromByteArray(data, &size);
	SHA384_Update(hdl, bytes, size);
	free(bytes);
}


public function sha384_finish(hdl:(SHA512_CTX*)uint):ByteArray
{
	unsigned char * buffer = malloc(SHA384_DIGEST_LENGTH);
	SHA384_Final(buffer, hdl);
	AS3_Val ba = newByteArrayFromMalloc(buffer, SHA384_DIGEST_LENGTH);
	free(buffer);
	return ba;
}


public function pkcs12_acquire(inP12:ByteArray, pwd:String, outContents:Object):uint
{
	sztrace("pkcs12_acquire");

	/* make something OpenSSL can use */
	unsigned int p12size = 0;
	unsigned char * p12data = newMallocFromByteArray(inP12, &p12size);
	BIO * bio = BIO_new_mem_buf(p12data, p12size);

	/* open and parse the P12 */
	X509 *cert;
	EVP_PKEY *hdl;
	STACK_OF(X509) *ca;
	PKCS12 * p12 = d2i_PKCS12_bio(bio, NULL);
	if(NULL == p12 || !PKCS12_parse(p12, pwd, &hdl, &cert, &ca)) {
		ERR_print_errors_fp(stderr);
		PKCS12_free(p12);
		BIO_free_all(bio);
		free(p12data);
		return 0;
	}
	sztrace("pkcs12_acquire - parsed p12");

	/* add the certificate to the output */
	unsigned int certSize = i2d_X509(cert, NULL);
	unsigned char *certData = malloc(certSize);
	i2d_X509(cert, &certData);
	certData -= certSize; /* i2d_* moves the ptr ahead -- ugh */
	AS3_SetS(outContents, "certificate", newByteArrayFromMalloc(certData, certSize));
	free(certData);
	X509_free(cert);
	sztrace("pkcs12_acquire - extracted certificate");
	
	/* add the key size */
	AS3_SetS(outContents, "keySize", AS3_Int(EVP_PKEY_bits(hdl)));
	
	/* add the key algorithm */
	switch(EVP_PKEY_type(hdl->type)) {
	case EVP_PKEY_RSA:
		AS3_SetS(outContents, "keyAlgorithm", AS3_String("1.2.840.113549.1.1.1")); // OID.kRSAEncryptionOID
		break;
	case EVP_PKEY_DSA:
		AS3_SetS(outContents, "keyAlgorithm", AS3_String("1.2.840.10040.4.1")); // OID.kDSASignatureKeyOID
		break;
	case EVP_PKEY_DH:
		AS3_SetS(outContents, "keyAlgorithm", AS3_String("1.2.840.113549.1.3.1")); // OID.kRSADHKeyAgreement
		break;
	case EVP_PKEY_EC:
		AS3_SetS(outContents, "keyAlgorithm", AS3_String("2.23.42.9.11.4.1")); // OID.kECDSADigitalSignatureAlgorithmOID
		break;
	default:
		AS3_SetS(outContents, "keyAlgorithm", AS3_String("Unsupported!"));
		break;
	}
	sztrace("pkcs12_acquire - set key algorithm");

	/*XXX extract the CA certs */

	/* return the key handle */
	return (uint)hdl;
}


public function pkcs12_sign(hdl:(EVP_PKEY*)uint, algID:String, digest:ByteArray):ByteArray
{
	sztrace("pkcs12_sign");

	/* convert algID to an NID_* value */
	int nid = getNID(algID);
	if(-1 == nid) {
		sztrace("pkcs12_sign - unsupported algorithm");
		return NULL;
	}
 	
	/* malloc a buffer for the digest data */
	unsigned int digestLen = 0;
	unsigned char * digestData = newMallocFromByteArray(digest, &digestLen);
	AS3_Release(digest);

	/* seed the PRNG as needed */
	prng_seed_impl(NULL);

	/* do the signing using <p12obj> */
	AS3_Val sig = NULL;
	int result = 0;
	unsigned int sigLen = 0;
	unsigned char * sigData = NULL;
	switch(EVP_PKEY_type(hdl->type)) {
	case EVP_PKEY_RSA: {
		RSA *rsa = EVP_PKEY_get1_RSA(hdl);
		sigLen = RSA_size(rsa);
		sigData = malloc(sigLen);
		result = RSA_sign(nid, digestData, digestLen, sigData, &sigLen, rsa);
		} 
		break;
		
	case EVP_PKEY_DSA: {
		DSA *dsa = EVP_PKEY_get1_DSA(hdl);
		sigLen = DSA_size(dsa);
		sigData = malloc(sigLen);
		result = DSA_sign(nid, digestData, digestLen, sigData, &sigLen, dsa);
		} 
		break;
		
	case EVP_PKEY_DH: /* DH *dh = EVP_PKEY_get1_DH(hdl); */
	case EVP_PKEY_EC: /* EC_KEY *ec = EVP_PKEY_get1_EC_KEY(hdl); */
	default:
		sztrace("pkcs12_sign - unsupported key type"); 
		break;
	}
	
	/* check for errors */
	if(0 == result) 
		ERR_print_errors_fp(stderr);

	free(digestData);
	free(sigData);
	return sig;
}


public function pkcs12_decrypt(hdl:(EVP_PKEY*)uint, paddingName:String, encrypted:ByteArray):ByteArray
{
	sztrace("pkcs12_decrypt");

	/* get the padding */
	int padding = getPadding(paddingName);
	if(-1 == padding) {
		sztrace("pkcs12_decrypt - padding not supported");
		return NULL;
	}

	/* seed the PRNG as needed */
	prng_seed_impl(NULL);
	
	/* malloc a buffer for the encrypted data */
	unsigned int encryptedLen = 0;
	unsigned char * encryptedData = newMallocFromByteArray(encrypted, &encryptedLen);
	AS3_Release(encrypted);
	
	/* do the decryption using <key> */
	AS3_Val decrypted = NULL;
	unsigned int decryptedLen = 0;
	unsigned char * decryptedData = NULL;
	switch(EVP_PKEY_type(hdl->type)) {
	case EVP_PKEY_RSA: {
		RSA *rsa = EVP_PKEY_get1_RSA(hdl);
		const int maxBufferSize = RSA_size(rsa);
		decryptedData = malloc(maxBufferSize);
		decryptedLen = RSA_private_decrypt(encryptedLen, encryptedData, decryptedData, rsa, padding);
		decrypted = newByteArrayFromMalloc(decryptedData, decryptedLen);	
		} 
		break;
	case EVP_PKEY_DSA:	/* no such thing as DSA decryption */
	case EVP_PKEY_DH:	/* DH *EVP_PKEY_get1_DH(EVP_PKEY *pkey); */
	case EVP_PKEY_EC:	/* EC_KEY *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey); */
	default:
		break;
	}

	/* check for errors */
	if(-1 == decryptedLen)
		ERR_print_errors_fp(stderr);

	free(encryptedData);
	free(decryptedData);
	return decrypted;	
}


public function pkcs12_release(hdl:(EVP_PKEY*)uint):void
{
	sztrace("pkcs12_release");
	EVP_PKEY_free(hdl);
}

public function aes128_cbc_encrypt_begin(key:ByteArray, iv:ByteArray):uint
{
	sztrace("aes128_cbc_encrypt_begin");

	EVP_CIPHER_CTX * ctx = malloc(sizeof(EVP_CIPHER_CTX));
	EVP_CIPHER_CTX_init(ctx);
	const EVP_CIPHER * cipherType = EVP_aes_128_cbc();
	unsigned int keySize = 0;
	unsigned char * keyBytes = newMallocFromByteArray(key, &keySize);
	unsigned int ivSize = 0;
	unsigned char * ivBytes = newMallocFromByteArray(iv, &ivSize);	
	if(!EVP_EncryptInit(ctx, cipherType, keyBytes, ivBytes))
		ERR_print_errors_fp(stderr);

	free(ivBytes);
	free(keyBytes);
	return (uint)ctx;	
}

public function aes128_cbc_decrypt_begin(key:ByteArray, iv:ByteArray):uint
{
	sztrace("aes128_cbc_decrypt_begin");

	EVP_CIPHER_CTX * ctx = malloc(sizeof(EVP_CIPHER_CTX));
	EVP_CIPHER_CTX_init(ctx);
	const EVP_CIPHER * cipherType = EVP_aes_128_cbc();
	unsigned int keySize = 0;
	unsigned char * keyBytes = newMallocFromByteArray(key, &keySize);
	unsigned int ivSize = 0;
	unsigned char * ivBytes = newMallocFromByteArray(iv, &ivSize);	
	if(!EVP_DecryptInit(ctx, cipherType, keyBytes, ivBytes))
		ERR_print_errors_fp(stderr);

	free(ivBytes);
	free(keyBytes);
	return (uint)ctx;	
}

public function symmetric_encrypt_update(hdl:(EVP_CIPHER_CTX*)uint, data:ByteArray):ByteArray
{
	sztrace("symmetric_encrypt_update");

	unsigned int inSize = 0;
	unsigned char * inData = newMallocFromByteArray(data, &inSize);

	char msg[512];
	sprintf(msg, "encrypting: %s", inData);
	sztrace(msg);
	
	unsigned int outSize = inSize + EVP_CIPHER_CTX_block_size(hdl) ;
	unsigned char * outData = malloc(outSize);

	sprintf(msg, "inSize=%d, block_size=%d", inSize, EVP_CIPHER_CTX_block_size(hdl));
	sztrace(msg);
	
	if(!EVP_EncryptUpdate(hdl, outData, (int*)&outSize, inData, inSize))
		ERR_print_errors_fp(stderr);
		
	sprintf(msg, "outputsize=%d", outSize);
	sztrace(msg);

	free(inData);
	AS3_Val out = newByteArrayFromMalloc(outData, outSize);
	free(outData);
	return out;
}

public function symmetric_encrypt_finish(hdl:(EVP_CIPHER_CTX*)uint):ByteArray
{
	sztrace("symmetric_encrypt_finish");

	unsigned int outSize = EVP_CIPHER_CTX_block_size(hdl);
	unsigned char * outData = malloc(outSize);
	
	if(!EVP_EncryptFinal(hdl, outData, (int*)&outSize))
		ERR_print_errors_fp(stderr);

	char msg[512];
	sprintf(msg, "outputsize=%d", outSize);
	sztrace(msg);

	AS3_Val out = newByteArrayFromMalloc(outData, outSize);
	free(outData);
	return out;
}

public function symmetric_decrypt_update(hdl:(EVP_CIPHER_CTX*)uint, data:ByteArray):ByteArray
{
	sztrace("symmetric_decrypt_update");

	unsigned int inSize = 0;
	unsigned char * inData = newMallocFromByteArray(data, &inSize);
	
	char msg[512];
	sprintf(msg, "inSize=%d, block_size=%d", inSize, EVP_CIPHER_CTX_block_size(hdl));
	sztrace(msg);
	
	unsigned int outSize = inSize + EVP_CIPHER_CTX_block_size(hdl);
	unsigned char * outData = malloc(outSize);

	if(!EVP_DecryptUpdate(hdl, outData, (int*)&outSize, inData, inSize))
		ERR_print_errors_fp(stderr);

	sprintf(msg, "outSize=%d", outSize);
	sztrace(msg);

	free(inData);
	AS3_Val out = newByteArrayFromMalloc(outData, outSize);
	free(outData);
	return out;
}

public function symmetric_decrypt_finish(hdl:(EVP_CIPHER_CTX*)uint):ByteArray
{
	unsigned int outSize = 0; //EVP_CIPHER_CTX_block_size(hdl);
	
	int result = EVP_DecryptFinal(hdl, NULL, (int*)&outSize);
	if(!result)
		ERR_print_errors_fp(stderr);

	char msg[512];
	sprintf(msg, "outSize=%d, rc=%d", outSize, result);
	sztrace(msg);
	
	outSize = 64000;//XXX testing
	unsigned char * outData = malloc(outSize);

	if(!EVP_DecryptFinal(hdl, outData, (int*)&outSize))
		ERR_print_errors_fp(stderr);

	sprintf(msg, "outSize=%d, outData=%s", outSize, outData);
	sztrace(msg);

	AS3_Val out = newByteArrayFromMalloc(outData, outSize);
	free(outData);
	return out;
}

